#ifndef BinningModels_H
#define BinningModels_H

namespace binningmodels{

	// Standard Drell-Yan binning
	const vector<double> _massbinningTrue = {
		15,
		20,
		25,
		30,
		35,
		40,
		45,
		50,
		55,
		60,
		64,
		68,
		72,
		76,
		81,
		86,
		91,
		96,
		101,
		106,
		110,
		115,
		120,
		126,
		133,
		141,
		150,
		160,
		171,
		185,
		200,
		220,
		243,
		273,
		320,
		380,
		440,
		510,
		600,
		700,
		830,
		1000,
		1500,
		3000
	};

	// Standard Drell-Yan binning with each bin split in half
	const vector<double> _massbinningReco0 = {
		15,
		17.5,
		20,
		22.5,
		25,
		27.5,
		30,
		32.5,
		35,
		37.5,
		40,
		42.5,
		45,
		47.5,
		50,
		52.5,
		55,
 		57.5,
		60,
		62,
		64,
		66,
		68,
		70,
		72,
		74,
		76,
		78.5,
		81,	
		83.5,
		86,
		88.5,
		91,
		93.5,
		96,
		98.5,
		101,
		103.5,
		106,
		108,
		110,
 		112.5,
		115,
		117.5,
		120,
		123,
		126,
		129.5,
		133,
		137,
		141,
		145.5,
		150,
		155,
		160,
		165.5,
		171,
		178,
		185,
		192.5,
		200,
 		210,
		220,
		231.5,
		243,
		258,
		273,
		296.5,
		320,
		350,
		380,
		410,
		440,
		475,
		510,
		555,
		600,
		650,
		700,
		765,
		830,
		915,
		1000,
 		1250,
		1500,
		2250,
		3000
	};

	// Split one bin (last bin)
	const vector<double> _massbinningReco1 = {
		15,
		20,
		25,
		30,
		35,
		40,
		45,
		50,
		55,
		60,
		64,
		68,
		72,
		76,
		81,
		86,
		91,
		96,
		101,
		106,
		110,
		115,
		120,
		126,
		133,
		141,
		150,
		160,
		171,
		185,
		200,
		220,
		243,
		273,
		320,
		380,
		440,
		510,
		600,
		700,
		830,
		1000,
		1500,
		2250,
		3000
	};

	// Split one bin (lowest bin)
	const vector<double> _massbinningReco2 = {
		15,
		17.5,
		20,
		25,
		30,
		35,
		40,
		45,
		50,
		55,
		60,
		64,
		68,
		72,
		76,
		81,
		86,
		91,
		96,
		101,
		106,
		110,
		115,
		120,
		126,
		133,
		141,
		150,
		160,
		171,
		185,
		200,
		220,
		243,
		273,
		320,
		380,
		440,
		510,
		600,
		700,
		830,
		1000,
		1500,
		3000
	};

	// Split lowest bin and highest bin
	const vector<double> _massbinningReco3 = {
		15,
		17.5,
		20,
		25,
		30,
		35,
		40,
		45,
		50,
		55,
		60,
		64,
		68,
		72,
		76,
		81,
		86,
		91,
		96,
		101,
		106,
		110,
		115,
		120,
		126,
		133,
		141,
		150,
		160,
		171,
		185,
		200,
		220,
		243,
		273,
		320,
		380,
		440,
		510,
		600,
		700,
		830,
		1000,
		1500,
		2250,
		3000
	};

}//end namespace

namespace peakmodels{
	//-----Drell-Yan-----//
	vector<double> _peakbinningTrueDY = {
		60,
		64,
		68,
		72,
		76,
		81,
		86,
		91,
		96,
		101,
		106,
		110,
		115,
		120
	};
	vector<double> _peakbinningRecoDY = {
		60,
		62,
		64,
		66,
		68,
		70,
		72,
		74,
		76,
		78.5,
		81,
		83.5,
		86,
		88.5,
		91,
		93.5,
		96,
		98.5,
		101,
		103.5,
		106,
		108,
		110,
		112.5,
		115,
		117.5,
		120
	};
	vector<double> _peakbinningRecoDY_SplitLow = {
		60,
		62,
		64,
		68,
		72,
		76,
		81,
		86,
		91,
		96,
		101,
		106,
		110,
		115,
		120
	};
	vector<double> _peakbinningRecoDY_SplitHigh = {
		60,
		64,
		68,
		72,
		76,
		81,
		86,
		91,
		96,
		101,
		106,
		110,
		115,
		117.5,
		120
	};
	vector<double> _peakbinningRecoDY_SplitLowAndHigh = {
		60,
		62,
		64,
		68,
		72,
		76,
		81,
		86,
		91,
		96,
		101,
		106,
		110,
		115,
		117.5,
		120
	};
	//-----5 GeV binning-----//
	vector<double> _peakbinningTrue5GeV = {
		60,
		65,
		70,
		75,
		80,
		85,
		90,
		95,
		100,
		105,
		110,
		115,
		120
	};
	vector<double> _peakbinningReco5GeV = {
		60,
		62.5,
		65,
		67,5,
		70,
		72.5,
		75,
		77.5,
		80,
		82.5,
		85,
		87.5,
		90,
		92.5,
		95,
		97.5,
		100,
		102.5,
		105,
		107.5,
		110,
		112.5,
		115,
		117.5,
		120
	};
	//-----4 GeV binning-----//
	vector<double> _peakbinningTrue4GeV = {
		59,
		63,
		67,
		71,
		75,
		79,
		83,
		87,
		91,
		95,
		99,
		103,
		107,
		111,
		115,
		119
	};
	vector<double> _peakbinningReco4GeV = {
		59,
		61,
		63,
		65,
		67,
		69,
		71,
		73,
		75,
		77,
		79,
		81,
		83,
		85,
		87,
		89,
		91,
		93,
		95,
		97,
		99,
		101,
		103,
		105,
		107,
		109,
		111,
		113,
		115,
		117,
		119
	};
}//end namespace peakmodels

#endif

