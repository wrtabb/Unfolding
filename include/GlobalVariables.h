#ifndef GlobalVariables_H
#define GlobalVariables_H

namespace GlobalVariables{
//-----Drell-Yan Analysis Binning-----//
const vector<double> _massbinningTrue = {
	15, 
	20, 
	25, 
	30, 
	35, 
	40, 
	45, 
	50, 
	55, 
	60, 
	64, 
	68, 
	72, 
	76, 
	81, 
	86, 
	91, 
	96, 
	101, 
	106, 
	110, 
	115, 
	120, 
	126, 
	133, 
	141, 
	150, 
	160, 
	171, 
	185, 
	200, 
	220, 
	243, 
	273, 
	320, 
	380, 
	440, 
	510, 
	600, 
	700, 
	830, 
	1000, 
	1500, 
	3000
};
const vector<double> _massbinningReco = {//binningType = 5
	15, 
	17.5, 
	20, 
	22.5, 
	25, 
	27.5, 
	30, 
	32.5, 
	35, 
	37.5, 
	40, 
	42.5, 
	45, 
	47.5, 
	50, 
	52.5, 
	55, 
	57.5, 
	60, 
	62, 
	64, 
	66, 
	68, 
	70, 
	72, 
	74, 
	76, 
	78.5, 
	81, 
	83.5, 
	86, 
	88.5, 
	91, 
	93.5, 
	96, 
	98.5, 
	101, 
	103.5, 
	106, 
	108, 
	110, 
	112.5, 
	115, 
	117.5, 
	120, 
	123, 
	126, 
	129.5, 
	133, 
	137, 
	141, 
	145.5, 
	150, 
	155, 
	160, 
	165.5, 
	171, 
	178, 
	185, 
	192.5, 
	200, 
	210, 
	220, 
	231.5, 
	243, 
	258, 
	273, 
	296.5, 
	320, 
	350, 
	380, 
	410, 
	440, 
	475, 
	510, 
	555, 
	600, 
	650, 
	700, 
	765, 
	830, 
	915, 
	1000, 
	1250, 
	1500, 
	2250, 
	3000
};

//-----Different binnnings for simple tests-----//
// List of binning types:
// 0 - twice as many reco bins 
// 1 - three times as many reco bins
// 2 - four times as many reco bins
// 3 - different binning completely
// 4 - split just one bin
// 5 - Drell-Yan binning with twice as many reco bins
// 6 - Reco binning the same as true binning (needed for inversion method)
// 7 - Reco binning with three times as many bins
// 8 - Reco binning with only the highest bin split
// 9 - Reco binning with one low bin split
const vector<double> _massbinningTrue0 = {
	0,
	5,
	10,
	15,
	20,
	25,
	30,
	35,
	40,
	45,
	50,
	55,
	60,
	65,
	70,
	75,
	80,
	85,
	90,
	95,
	100,
	105,
	110,
	115,
	120,
	125,
	130,
	135,
	140,
	145,
	150,
	155,
	160,
	165
};

// Split true bins in half
const vector<double> _massbinningReco0 = {
	0, 
	2.5, 
	5, 
	7.5, 
	10, 
	12.5, 
	15, 
	17.5, 
	20, 
	22.5, 
	25, 
	27.5, 
	30, 
	32.5, 
	35, 
	37.5, 
	40, 
	42.5, 
	45, 
	47.5, 
	50, 
	52.5, 
	55, 
	57.5, 
	60, 
	62.5, 
	65, 
	67.5, 
	70, 
	72.5, 
	75, 
	77.5, 
	80, 
	82.5, 
	85, 
	87.5, 
	90, 
	92.5, 
	95, 
	97.5, 
	100, 
	102.5, 
	105, 
	107.5, 
	110, 
	112.5, 
	115, 
	117.5, 
	120, 
	122.5, 
	125, 
	127.5, 
	130, 
	132.5, 
	135, 
	137.5, 
	140, 
	142.5, 
	145, 
	147.5, 
	150, 
	152.5, 
	155, 
	157.5, 
	160, 
	162.5, 
	165
};

// Split true bins in thirds
const vector<double> _massbinningReco1 = {
	0, 
	1.66667, 
	3.33333, 
	5, 
	6.66667, 
	8.33333, 
	10, 
	11.6667, 
	13.3333, 
	15, 
	16.6667, 
	18.3333, 
	20, 
	21.6667, 
	23.3333, 
	25, 
	26.6667, 
	28.3333, 
	30, 
	31.6667, 
	33.3333, 
	35, 
	36.6667, 
	38.3333, 
	40, 
	41.6667, 
	43.3333, 
	45, 
	46.6667, 
	48.3333, 
	50, 
	51.6667, 
	53.3333, 
	55, 
	56.6667, 
	58.3333, 
	60, 
	61.6667, 
	63.3333, 
	65, 
	66.6667, 
	68.3333, 
	70, 
	71.6667, 
	73.3333, 
	75, 
	76.6667, 
	78.3333, 
	80, 
	81.6667, 
	83.3333, 
	85, 
	86.6667, 
	88.3333, 
	90, 
	91.6667, 
	93.3333, 
	95, 
	96.6667, 
	98.3333, 
	100, 
	101.667, 
	103.333, 
	105, 
	106.667, 
	108.333, 
	110, 
	111.667, 
	113.333, 
	115, 
	116.667, 
	118.333, 
	120, 
	121.667, 
	123.333, 
	125, 
	126.667, 
	128.333, 
	130, 
	131.667, 
	133.333, 
	135, 
	136.667, 
	138.333, 
	140, 
	141.667, 
	143.333, 
	145, 
	146.667, 
	148.333, 
	150, 
	151.667, 
	153.333, 
	155, 
	156.667, 
	158.333, 
	160, 
	161.667, 
	163.333, 
	165 
};

// Split true bins in quarters
const vector<double> _massbinningReco2 = {
	0, 
	1.25, 
	2.5, 
	3.75, 
	5, 
	6.25, 
	7.5, 
	8.75, 
	10, 
	11.25, 
	12.5, 
	13.75, 
	15, 
	16.25, 
	17.5, 
	18.75, 
	20, 
	21.25, 
	22.5, 
	23.75, 
	25, 
	26.25, 
	27.5, 
	28.75, 
	30, 
	31.25, 
	32.5, 
	33.75, 
	35, 
	36.25, 
	37.5, 
	38.75, 
	40, 
	41.25, 
	42.5, 
	43.75, 
	45, 
	46.25, 
	47.5, 
	48.75, 
	50, 
	51.25, 
	52.5, 
	53.75, 
	55, 
	56.25, 
	57.5, 
	58.75, 
	60, 
	61.25, 
	62.5, 
	63.75, 
	65, 
	66.25, 
	67.5, 
	68.75, 
	70, 
	71.25, 
	72.5, 
	73.75, 
	75, 
	76.25, 
	77.5, 
	78.75, 
	80, 
	81.25, 
	82.5, 
	83.75, 
	85, 
	86.25, 
	87.5, 
	88.75, 
	90, 
	91.25, 
	92.5, 
	93.75, 
	95, 
	96.25, 
	97.5, 
	98.75, 
	100, 
	101.25, 
	102.5, 
	103.75, 
	105, 
	106.25, 
	107.5, 
	108.75, 
	110, 
	111.25, 
	112.5, 
	113.75, 
	115, 
	116.25, 
	117.5, 
	118.75, 
	120, 
	121.25, 
	122.5, 
	123.75, 
	125, 
	126.25, 
	127.5, 
	128.75, 
	130, 
	131.25, 
	132.5, 
	133.75, 
	135, 
	136.25, 
	137.5, 
	138.75, 
	140, 
	141.25, 
	142.5, 
	143.75, 
	145, 
	146.25, 
	147.5, 
	148.75, 
	150, 
	151.25, 
	152.5, 
	153.75, 
	155, 
	156.25, 
	157.5, 
	158.75, 
	160, 
	161.25, 
	162.5, 
	163.75, 
	165 
};

// Not matching true bin boundaries
// Bin width = 3
const vector<double> _massbinningReco3 = {
	0, 
	3, 
	6, 
	9, 
	12, 
	15, 
	18, 
	21, 
	24, 
	27, 
	30, 
	33, 
	36, 
	39, 
	42, 
	45, 
	48, 
	51, 
	54, 
	57, 
	60, 
	63, 
	66, 
	69, 
	72, 
	75, 
	78, 
	81, 
	84, 
	87, 
	90, 
	93, 
	96, 
	99, 
	102, 
	105, 
	108, 
	111, 
	114, 
	117, 
	120, 
	123, 
	126, 
	129, 
	132, 
	135, 
	138, 
	141, 
	144, 
	147, 
	150, 
	153, 
	156, 
	159, 
	162, 
	165
};

// Splitting just one bin
const vector<double> _massbinningReco4 = {
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55,
        60,
        65,
        70,
        75,
        80,
        85,
        90,
        95,
        100,
        105,
        110,
        115,
        120,
        125,
        130,
        135,
        140,
        145,
        150,
        155,
        160,
	162.5, //added this bin
        165
};

const vector<double> _massbinningReco5 = {
	15, 
	16.6667, 
	18.3333, 
	20, 
	21.6667, 
	23.3333, 
	25, 
	26.6667, 
	28.3333, 
	30, 
	31.6667, 
	33.3333, 
	35, 
	36.6667, 
	38.3333, 
	40, 
	41.6667, 
	43.3333, 
	45, 
	46.6667, 
	48.3333, 
	50, 
	51.6667, 
	53.3333, 
	55, 
	56.6667, 
	58.3333, 
	60, 
	61.3333, 
	62.6667, 
	64, 
	65.3333, 
	66.6667, 
	68, 
	69.3333, 
	70.6667, 
	72, 
	73.3333, 
	74.6667, 
	76, 
	77.6667, 
	79.3333, 
	81, 
	82.6667, 
	84.3333, 
	86, 
	87.6667, 
	89.3333, 
	91, 
	92.6667, 
	94.3333, 
	96, 
	97.6667, 
	99.3333, 
	101, 
	102.667, 
	104.333, 
	106, 
	107.333, 
	108.667, 
	110, 
	111.667, 
	113.333, 
	115, 
	116.667, 
	118.333, 
	120, 
	122, 
	124, 
	126, 
	128.333, 
	130.667, 
	133, 
	135.667, 
	138.333, 
	141, 
	144, 
	147, 
	150, 
	153.333, 
	156.667, 
	160, 
	163.667, 
	167.333, 
	171, 
	175.667, 
	180.333, 
	185, 
	190, 
	195, 
	200, 
	206.667, 
	213.333, 
	220, 
	227.667, 
	235.333, 
	243, 
	253, 
	263, 
	273, 
	288.667, 
	304.333, 
	320, 
	340, 
	360, 
	380, 
	400, 
	420, 
	440, 
	463.333, 
	486.667, 
	510, 
	540, 
	570, 
	600, 
	633.333, 
	666.667, 
	700, 
	743.333, 
	786.667, 
	830, 
	886.667, 
	943.333, 
	1000, 
	1166.67, 
	1333.33, 
	1500, 
	2000, 
	2500, 
	3000
};

const vector<double> _massbinningReco6 = {//binningType==8
	15, 
	20, 
	25, 
	30, 
	35, 
	40, 
	45, 
	50, 
	55, 
	60, 
	64, 
	68, 
	72, 
	76, 
	81, 
	86, 
	91, 
	96, 
	101, 
	106, 
	110, 
	115, 
	120, 
	126, 
	133, 
	141, 
	150, 
	160, 
	171, 
	185, 
	200, 
	220, 
	243, 
	273, 
	320, 
	380, 
	440, 
	510, 
	600, 
	700, 
	830, 
	1000, 
	1500, 
	2250,
	3000
};
const vector<double> _massbinningReco7 = {//binningType==9
	15, 
	17.5,
	20, 
	25, 
	30, 
	35, 
	40, 
	45, 
	50, 
	55, 
	60, 
	64, 
	68, 
	72, 
	76, 
	81, 
	86, 
	91, 
	96, 
	101, 
	106, 
	110, 
	115, 
	120, 
	126, 
	133, 
	141, 
	150, 
	160, 
	171, 
	185, 
	200, 
	220, 
	243, 
	273, 
	320, 
	380, 
	440, 
	510, 
	600, 
	700, 
	830, 
	1000, 
	1500, 
	3000
};

//binning for peakComparisonUnfolding
const vector<double> _peakMassRecoDY = {
	60, 
	62, 
	64, 
	66, 
	68, 
	70, 
	72, 
	74, 
	76, 
	78.5, 
	81, 
	83.5, 
	86, 
	88.5, 
	91, 
	93.5, 
	96, 
	98.5, 
	101, 
	103.5, 
	106, 
	108, 
	110, 
	112.5, 
	115, 
	117.5, 
	120 
};
const vector<double> _peakMassReco = {
	60, 
	62.5, 
	65, 
	67.5, 
	70, 
	72.5, 
	75, 
	77.5, 
	80, 
	82.5, 
	85, 
	87.5, 
	90, 
	92.5, 
	95, 
	97.5, 
	100, 
	102.5, 
	105, 
	107.5, 
	110, 
	112.5, 
	115, 
	117.5, 
	120 
};
const vector<double> _peakMassTrueDY = {
	60,
	64,
	68,
	72,
	76,
	81,
	86,
	91,
	96,
	101,
	106,
	110,
	115,
	120
};
const vector<double> _peakMassTrue = {
	60,
	65,
	70,
	75,
	80,
	85,
	90,
	95,
	100,
	105,
	110,
	115,
	120
};
}//end namespace 
#endif
